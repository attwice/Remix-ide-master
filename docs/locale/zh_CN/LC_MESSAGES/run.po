# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Remix
# This file is distributed under the same license as the Remix, Ethereum-IDE
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Remix, Ethereum-IDE 1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-16 15:02+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../run.md:1
msgid "Deploy & Run"
msgstr ""

#: ../../run.md:4
msgid ""
"The Deploy & Run module allows you to send transactions to the current "
"environment."
msgstr ""

#: ../../run.md:6
msgid ""
"To use this module, you need to have a contract compiled.  So, if there "
"is a contract name in the <b>CONTRACT</b> select box (the select box is "
"under the VALUE input field), you can use this module.  If nothing is "
"there or you do not see the contract you want, you need to select a "
"contract in the editor to make it active, go to a compiler module and "
"compile it, and then come back to Deploy & Run."
msgstr ""

#: ../../run.md:10
msgid "Environment"
msgstr ""

#: ../../run.md:13
msgid ""
"JavaScript VM: All the transactions will be executed in a sandbox "
"blockchain in the browser. This means nothing will be persisted when you "
"reload the page. The JsVM is its own blockchain and on each reload it "
"will start a new blockchain, the old one will not be saved."
msgstr ""

#: ../../run.md:17
msgid ""
"Injected Provider: Remix will connect to an injected web3 provider. "
"Metamask is an example of a provider that inject web3."
msgstr ""

#: ../../run.md:20
msgid ""
"Web3 Provider: Remix will connect to a remote node. You will need to "
"provide the URL to the selected provider: geth, parity or any Ethereum "
"client."
msgstr ""

#: ../../run.md:22
msgid "More about Web3 Provider"
msgstr ""

#: ../../run.md:24
msgid ""
"If you are using Geth & https://remix.ethereum.org, please use the "
"following Geth command to allow requests from Remix:"
msgstr ""

#: ../../run.md:26
msgid "geth --rpc --rpccorsdomain https://remix.ethereum.org"
msgstr ""

#: ../../run.md:28
msgid "Also see Geth Docs about the rpc server"
msgstr ""

#: ../../run.md:30
msgid ""
"To run Remix using  https://remix.ethereum.org & a local test node, use "
"this Geth command:"
msgstr ""

#: ../../run.md:32
msgid ""
"geth --rpc --rpccorsdomain=\"https://remix.ethereum.org\" --rpcapi "
"web3,eth,debug,personal,net --vmdebug --datadir "
"<path/to/local/folder/for/test/chain> --dev console"
msgstr ""

#: ../../run.md:34
msgid ""
"If you are using remix-alpha or a local version of remix - replace the "
"url of the --rpccorsdomain with the url of Remix that you are using."
msgstr ""

#: ../../run.md:36
msgid "To run Remix Desktop & a local test node, use this Geth command:"
msgstr ""

#: ../../run.md:38
msgid ""
"geth --rpc "
"--rpccorsdomain=\"package://a7df6d3c223593f3550b35e90d7b0b1f.mod\" "
"--rpcapi web3,eth,debug,personal,net --vmdebug --datadir "
"<path/to/local/folder/for/test/chain> --dev console"
msgstr ""

#: ../../run.md:40
msgid "Also see Geth Docs on Dev mode"
msgstr ""

#: ../../run.md:42
msgid "The Web3 Provider Endpoint for a local node is http://localhost:8545"
msgstr ""

#: ../../run.md:46
msgid ""
"WARNING: Don't get lazy. It is a bad idea to use the Geth flag "
"<b>--rpccorsdomain</b> with a wildcard: --rpccorsdomain *"
msgstr ""

#: ../../run.md:48
msgid ""
"If you put the wildcard *, it means everyone can request the node. "
"Whereas, if you put a URL, it restricts the urls to just that one - e.g."
"  --rpccorsdomain 'https://remix-alpha.ethereum.org'"
msgstr ""

#: ../../run.md:50
msgid ""
"Only use --rpccorsdomain * when using a test chain AND using only test "
"accounts. For real accounts or on the mainchain specify the url."
msgstr ""

#: ../../run.md:55
msgid "Account:"
msgstr ""

#: ../../run.md:57
msgid ""
"Account: the list of accounts associated with the current environment "
"(and their associated balances).  On the JsVM, you have a choice of 5 "
"accounts.  If using Injected Web3 with MetaMask, you need to change the "
"account in MetaMask."
msgstr ""

#: ../../run.md:60
msgid "Gas Limit:"
msgstr ""

#: ../../run.md:62
msgid ""
"This sets the maximum amount of gas that will be allowed for all the "
"transactions created in Remix."
msgstr ""

#: ../../run.md:65
msgid "Value:"
msgstr ""

#: ../../run.md:67
msgid ""
"This sets the amount of ETH, WEI, GWEI etc that is sent to a contract or "
"a payable function.  ( Note: payable functions have a red button). The "
"value is always reset to 0 after each transaction execution). The Value "
"field is NOT for gas."
msgstr ""

#: ../../run.md:71
msgid "Initiate Instance"
msgstr ""

#: ../../run.md:74
msgid ""
"In the image above, the select box is set to Ballot.  This select box "
"will contain the list of compiled contracts."
msgstr ""

#: ../../run.md:76
msgid ""
"Deploy send a transaction that deploys the selected contract. When the "
"transaction is mined, the newly created instance will be added (this "
"might take several seconds). Note that if the constructor has parameters,"
" you need to specify them."
msgstr ""

#: ../../run.md:81
msgid ""
"At Address this is used at access a contract that has already been "
"deployed. It assumes that the given address is an instance of the "
"selected contract.  Note: There's no check at this point, so be careful "
"when using this feature, and be sure you trust the contract at that "
"address."
msgstr ""

#: ../../run.md:84
msgid "Pending Instances"
msgstr ""

#: ../../run.md:87
msgid ""
"Validating a transaction takes several seconds. During this time, the GUI"
" shows it in a pending mode. When the transaction is mined, the number of"
" pending transactions is updated and the transaction is added to the log "
"(see terminal)."
msgstr ""

#: ../../run.md:92
msgid "Using the ABI"
msgstr ""

#: ../../run.md:95
msgid ""
"Using Deploy or At Address is a classic use case of Remix. However, it is"
" possible to interact with a contract by using its ABI. The ABI is a JSON"
" array which describe its interface."
msgstr ""

#: ../../run.md:99
msgid ""
"To interact with a contract using the ABI, create a new file in Remix "
"with extension *.abi and copy the ABI content to it. Then, in the input "
"next to At Address, put the Address of the contract you want to interact "
"with. Click on At Address, a new \"connection\" with the contract will "
"popup below."
msgstr ""

#: ../../run.md:105
msgid "Using the Recorder"
msgstr ""

#: ../../run.md:108
msgid ""
"The Recorder is a tool used to save a bunch of transactions in a JSON "
"file and rerun them later either in the same environment or in another."
msgstr ""

#: ../../run.md:111
msgid ""
"Saving to the JSON file ( by default its called scenario.json) allows one"
" to easily check the transaction list, tweak input parameters, change "
"linked library, etc..."
msgstr ""

#: ../../run.md:113
msgid "There are many use cases for the recorder."
msgstr ""

#: ../../run.md:115
msgid "For instance:"
msgstr ""

#: ../../run.md:117
msgid ""
"After having coded and tested contracts in a constrained environment "
"(like the JavaScript VM), you could then change the environment and "
"redeploy it to a more realistic environment like a test net with an "
"injected web3 or to a Geth node. By using the generated scenario.json "
"file, you will be using all the same settings that you used in the "
"Javascript VM.  And this mean that you won't need to click the interface "
"100 times or whatever to get the state that you achieved originally.  So "
"the recorder could be a tool to protect your sanity."
msgstr ""

#: ../../run.md:120
msgid ""
"You can also change the settings in the scenario.json file to customize "
"the playback."
msgstr ""

#: ../../run.md:122
msgid ""
"Deploying contract does often require more than creating one transaction "
"and so the recorder will automate this deployment."
msgstr ""

#: ../../run.md:125
msgid ""
"Working in a dev environment often requires to setup the state in a first"
" place."
msgstr ""

#: ../../run.md:130
msgid "scenario.json"
msgstr ""

#: ../../run.md:131
msgid ""
"To create this file in the recorder, you first of course need to have run"
" some transactions.  In the image above - it has a 0 next to Transactions"
" Recorded.  So this isn't the right moment to save transactions because -"
" well because there aren't any.  Each time you make a transaction, that "
"number will increment.  Then when you are ready, click the floppy disk "
"icon and the scenario.json file will be created."
msgstr ""

#: ../../run.md:133
msgid "The JSON file below is an example of the scenario.json file."
msgstr ""

#: ../../run.md:135
msgid "In it, 3 transactions are executed:"
msgstr ""

#: ../../run.md:137
msgid "The first corresponds to the deployment of the lib testLib."
msgstr ""

#: ../../run.md:139
msgid ""
"The second corresponds to the deployment of the contract test with the "
"first parameter of the constructor set to 11. That contract depends on a "
"library. The linkage is done using the property linkReferences. In that "
"case we use the address of the previously created library : "
"created{1512830014773}. The number is the id (timestamp) of the "
"transaction that led to the creation of the library."
msgstr ""

#: ../../run.md:146
msgid ""
"The third record corresponds to the call to the function set of the "
"contract test (the property to is set to: created{1512830015080}) . Input"
" parameters are 1 and 0xca35b7d915458ef540ade6068dfe2f44e8fa733c"
msgstr ""

#: ../../run.md:151
msgid ""
"All these transactions are created using the value of the accounts "
"account{0}."
msgstr ""

